{{- define "import" }}
	"encoding/base64"
	"cloud.google.com/go/spanner"
	_ "github.com/googleapis/go-sql-spanner"
{{ end -}}

{{- define "is-constraint-error" }}{{/* gotype: storj.io/dbx/code/golang.deleteWorld */}}
func (impl {{ .Receiver }}) isConstraintError(err error) (constraint string, ok bool) {
	return "", false
}
{{ end -}}

{{- define "open" }}
func openspanner(source string) (*sql.DB, error) {
	return sql.Open("spanner", strings.TrimPrefix(source, "spanner://"))
}
{{ end -}}

{{- define "definitions" }}
func spannerConvertJSON(v any) any {
	if v == nil {
		return spanner.NullJSON{Value: nil, Valid: true}
	}
	if v, ok := v.([]byte); ok {
		return spanner.NullJSON{Value: v, Valid: true}
	}
	if v, ok := v.(*[]byte); ok {
		return &spannerJSON{data: v}
	}
	return v
}

type spannerJSON struct {
	data *[]byte
}

func (s *spannerJSON) Scan(input any) error {
	if input == nil {
		*s.data = nil
		return nil
	}
	if v, ok := input.(spanner.NullJSON); ok {
		if !v.Valid || v.Value == nil {
			*s.data = nil
			return nil
		}

		if str, ok := v.Value.(string); ok {
			bytesVal, err := base64.StdEncoding.DecodeString(str)
			if err != nil {
				return fmt.Errorf("expected base64 from spanner: %w", err)
			}
			*s.data = bytesVal
			return nil
		}

		return fmt.Errorf("unable to decode spanner.NullJSON with type %T", v.Value)
	}
	return fmt.Errorf("unable to decode %T", input)
}
{{ end -}}
