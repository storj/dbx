// AUTOGENERATED BY storj.io/dbx
// DO NOT EDIT.

package default_fields

import (
	"bytes"
	"context"
	"database/sql"
	"errors"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"
	"unicode"

	_ "cloud.google.com/go/spanner"
	"crypto/rand"
	_ "github.com/googleapis/go-sql-spanner"
	"github.com/jackc/pgx/v5/pgconn"
	_ "github.com/jackc/pgx/v5/stdlib"
	"github.com/mattn/go-sqlite3"
)

// Prevent conditional imports from causing build failures.
var _ = strconv.Itoa
var _ = strings.LastIndex
var _ = fmt.Sprint
var _ sync.Mutex

var (
	WrapErr = func(err *Error) error { return err }
	Logger  func(format string, args ...any)

	errTooManyRows       = errors.New("too many rows")
	errUnsupportedDriver = errors.New("unsupported driver")
	errEmptyUpdate       = errors.New("empty update")
)

func logError(format string, args ...any) {
	if Logger != nil {
		Logger(format, args...)
	}
}

type ErrorCode int

const (
	ErrorCode_Unknown ErrorCode = iota
	ErrorCode_UnsupportedDriver
	ErrorCode_NoRows
	ErrorCode_TxDone
	ErrorCode_TooManyRows
	ErrorCode_ConstraintViolation
	ErrorCode_EmptyUpdate
)

type Error struct {
	Err         error
	Code        ErrorCode
	Driver      string
	Constraint  string
	QuerySuffix string
}

func (e *Error) Error() string {
	return e.Err.Error()
}

func (e *Error) Unwrap() error {
	return e.Err
}

func wrapErr(e *Error) error {
	if WrapErr == nil {
		return e
	}
	return WrapErr(e)
}

func makeErr(err error) error {
	if err == nil {
		return nil
	}
	e := &Error{Err: err}
	switch err {
	case sql.ErrNoRows:
		e.Code = ErrorCode_NoRows
	case sql.ErrTxDone:
		e.Code = ErrorCode_TxDone
	}
	return wrapErr(e)
}

func unsupportedDriver(driver string) error {
	return wrapErr(&Error{
		Err:    errUnsupportedDriver,
		Code:   ErrorCode_UnsupportedDriver,
		Driver: driver,
	})
}

func emptyUpdate() error {
	return wrapErr(&Error{
		Err:  errEmptyUpdate,
		Code: ErrorCode_EmptyUpdate,
	})
}

func tooManyRows(query_suffix string) error {
	return wrapErr(&Error{
		Err:         errTooManyRows,
		Code:        ErrorCode_TooManyRows,
		QuerySuffix: query_suffix,
	})
}

func constraintViolation(err error, constraint string) error {
	return wrapErr(&Error{
		Err:        err,
		Code:       ErrorCode_ConstraintViolation,
		Constraint: constraint,
	})
}

type driver interface {
	ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error)
	QueryContext(ctx context.Context, query string, args ...any) (*sql.Rows, error)
	QueryRowContext(ctx context.Context, query string, args ...any) *sql.Row
}

type DB struct {
	*sql.DB
	dbMethods

	Hooks struct {
		Now func() time.Time
	}
}

func Open(driver, source string) (db *DB, err error) {
	var sql_db *sql.DB
	switch driver {
	case "sqlite3":
		sql_db, err = opensqlite3(source)
	case "pgx":
		sql_db, err = openpgx(source)
	case "pgxcockroach":
		sql_db, err = openpgxcockroach(source)
	case "spanner":
		sql_db, err = openspanner(source)
	default:
		return nil, unsupportedDriver(driver)
	}
	if err != nil {
		return nil, makeErr(err)
	}
	defer func(sql_db *sql.DB) {
		if err != nil {
			_ = sql_db.Close()
		}
	}(sql_db)

	if err := sql_db.Ping(); err != nil {
		return nil, makeErr(err)
	}

	db = &DB{
		DB: sql_db,
	}
	db.Hooks.Now = time.Now

	switch driver {
	case "sqlite3":
		db.dbMethods = newsqlite3(db)
	case "pgx":
		db.dbMethods = newpgx(db)
	case "pgxcockroach":
		db.dbMethods = newpgxcockroach(db)
	case "spanner":
		db.dbMethods = newspanner(db)
	default:
		return nil, unsupportedDriver(driver)
	}

	return db, nil
}

func (obj *DB) Close() (err error) {
	return obj.makeErr(obj.DB.Close())
}

func (obj *DB) Open(ctx context.Context) (*Tx, error) {
	tx, err := obj.DB.BeginTx(ctx, nil)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	return &Tx{
		Tx:        tx,
		txMethods: obj.wrapTx(tx),
	}, nil
}

func DeleteAll(ctx context.Context, db *DB) (int64, error) {
	tx, err := db.Open(ctx)
	if err != nil {
		return 0, err
	}
	defer func() {
		if err == nil {
			err = db.makeErr(tx.Commit())
			return
		}

		if err_rollback := tx.Rollback(); err_rollback != nil {
			logError("delete-all: rollback failed: %v", db.makeErr(err_rollback))
		}
	}()
	return tx.deleteAll(ctx)
}

type Tx struct {
	Tx *sql.Tx
	txMethods
}

type dialectTx struct {
	tx *sql.Tx
}

func (tx *dialectTx) Commit() (err error) {
	return makeErr(tx.tx.Commit())
}

func (tx *dialectTx) Rollback() (err error) {
	return makeErr(tx.tx.Rollback())
}

type sqlite3Impl struct {
	db      *DB
	dialect __sqlbundle_sqlite3
	driver  driver
}

func (obj *sqlite3Impl) Rebind(s string) string {
	return obj.dialect.Rebind(s)
}

func (obj *sqlite3Impl) logStmt(stmt string, args ...any) {
	sqlite3LogStmt(stmt, args...)
}

func (obj *sqlite3Impl) makeErr(err error) error {
	constraint, ok := obj.isConstraintError(err)
	if ok {
		return constraintViolation(err, constraint)
	}
	return makeErr(err)
}

type sqlite3DB struct {
	db *DB
	*sqlite3Impl
}

func newsqlite3(db *DB) *sqlite3DB {
	return &sqlite3DB{
		db: db,
		sqlite3Impl: &sqlite3Impl{
			db:     db,
			driver: db.DB,
		},
	}
}

func (obj *sqlite3DB) Schema() []string {
	return []string{

		`CREATE TABLE bars (
	pk INTEGER NOT NULL,
	a INTEGER NOT NULL,
	b INTEGER NOT NULL,
	c INTEGER NOT NULL DEFAULT 40,
	PRIMARY KEY ( pk )
)`,

		`CREATE TABLE bazs (
	pk INTEGER NOT NULL,
	a INTEGER NOT NULL DEFAULT 50,
	b INTEGER NOT NULL DEFAULT 60,
	c INTEGER NOT NULL DEFAULT 70,
	PRIMARY KEY ( pk )
)`,

		`CREATE TABLE foos (
	pk INTEGER NOT NULL,
	a INTEGER NOT NULL DEFAULT 10,
	b INTEGER NOT NULL,
	c INTEGER NOT NULL DEFAULT 20,
	PRIMARY KEY ( pk )
)`,

		`CREATE TABLE minimals (
	pk INTEGER NOT NULL,
	PRIMARY KEY ( pk )
)`,

		`CREATE TABLE specials (
	pk INTEGER NOT NULL,
	a TIMESTAMP NOT NULL DEFAULT 'epoch',
	b TEXT NOT NULL DEFAULT '{}',
	PRIMARY KEY ( pk )
)`,
	}
}

func (obj *sqlite3DB) DropSchema() []string {
	return []string{

		`DROP TABLE IF EXISTS specials`,

		`DROP TABLE IF EXISTS minimals`,

		`DROP TABLE IF EXISTS foos`,

		`DROP TABLE IF EXISTS bazs`,

		`DROP TABLE IF EXISTS bars`,
	}
}

func (obj *sqlite3DB) wrapTx(tx *sql.Tx) txMethods {
	return &sqlite3Tx{
		dialectTx: dialectTx{tx: tx},
		sqlite3Impl: &sqlite3Impl{
			db:     obj.db,
			driver: tx,
		},
	}
}

type sqlite3Tx struct {
	dialectTx
	*sqlite3Impl
}

func sqlite3LogStmt(stmt string, args ...any) {
	// TODO: render placeholders
	if Logger != nil {
		out := fmt.Sprintf("stmt: %s\nargs: %v\n", stmt, pretty(args))
		Logger(out)
	}
}

type pgxImpl struct {
	db      *DB
	dialect __sqlbundle_pgx
	driver  driver
}

func (obj *pgxImpl) Rebind(s string) string {
	return obj.dialect.Rebind(s)
}

func (obj *pgxImpl) logStmt(stmt string, args ...any) {
	pgxLogStmt(stmt, args...)
}

func (obj *pgxImpl) makeErr(err error) error {
	constraint, ok := obj.isConstraintError(err)
	if ok {
		return constraintViolation(err, constraint)
	}
	return makeErr(err)
}

type pgxDB struct {
	db *DB
	*pgxImpl
}

func newpgx(db *DB) *pgxDB {
	return &pgxDB{
		db: db,
		pgxImpl: &pgxImpl{
			db:     db,
			driver: db.DB,
		},
	}
}

func (obj *pgxDB) Schema() []string {
	return []string{

		`CREATE TABLE bars (
	pk bigserial NOT NULL,
	a integer NOT NULL,
	b integer NOT NULL,
	c integer NOT NULL DEFAULT 40,
	PRIMARY KEY ( pk )
)`,

		`CREATE TABLE bazs (
	pk bigserial NOT NULL,
	a integer NOT NULL DEFAULT 50,
	b integer NOT NULL DEFAULT 60,
	c integer NOT NULL DEFAULT 70,
	PRIMARY KEY ( pk )
)`,

		`CREATE TABLE foos (
	pk bigserial NOT NULL,
	a integer NOT NULL DEFAULT 10,
	b integer NOT NULL,
	c integer NOT NULL DEFAULT 20,
	PRIMARY KEY ( pk )
)`,

		`CREATE TABLE minimals (
	pk bigserial NOT NULL,
	PRIMARY KEY ( pk )
)`,

		`CREATE TABLE specials (
	pk bigserial NOT NULL,
	a timestamp with time zone NOT NULL DEFAULT 'epoch',
	b jsonb NOT NULL DEFAULT '{}',
	PRIMARY KEY ( pk )
)`,
	}
}

func (obj *pgxDB) DropSchema() []string {
	return []string{

		`DROP TABLE IF EXISTS specials`,

		`DROP TABLE IF EXISTS minimals`,

		`DROP TABLE IF EXISTS foos`,

		`DROP TABLE IF EXISTS bazs`,

		`DROP TABLE IF EXISTS bars`,
	}
}

func (obj *pgxDB) wrapTx(tx *sql.Tx) txMethods {
	return &pgxTx{
		dialectTx: dialectTx{tx: tx},
		pgxImpl: &pgxImpl{
			db:     obj.db,
			driver: tx,
		},
	}
}

type pgxTx struct {
	dialectTx
	*pgxImpl
}

func pgxLogStmt(stmt string, args ...any) {
	// TODO: render placeholders
	if Logger != nil {
		out := fmt.Sprintf("stmt: %s\nargs: %v\n", stmt, pretty(args))
		Logger(out)
	}
}

type pgxcockroachImpl struct {
	db      *DB
	dialect __sqlbundle_pgxcockroach
	driver  driver
}

func (obj *pgxcockroachImpl) Rebind(s string) string {
	return obj.dialect.Rebind(s)
}

func (obj *pgxcockroachImpl) logStmt(stmt string, args ...any) {
	pgxcockroachLogStmt(stmt, args...)
}

func (obj *pgxcockroachImpl) makeErr(err error) error {
	constraint, ok := obj.isConstraintError(err)
	if ok {
		return constraintViolation(err, constraint)
	}
	return makeErr(err)
}

type pgxcockroachDB struct {
	db *DB
	*pgxcockroachImpl
}

func newpgxcockroach(db *DB) *pgxcockroachDB {
	return &pgxcockroachDB{
		db: db,
		pgxcockroachImpl: &pgxcockroachImpl{
			db:     db,
			driver: db.DB,
		},
	}
}

func (obj *pgxcockroachDB) Schema() []string {
	return []string{

		`CREATE TABLE bars (
	pk bigserial NOT NULL,
	a integer NOT NULL,
	b integer NOT NULL,
	c integer NOT NULL DEFAULT 40,
	PRIMARY KEY ( pk )
)`,

		`CREATE TABLE bazs (
	pk bigserial NOT NULL,
	a integer NOT NULL DEFAULT 50,
	b integer NOT NULL DEFAULT 60,
	c integer NOT NULL DEFAULT 70,
	PRIMARY KEY ( pk )
)`,

		`CREATE TABLE foos (
	pk bigserial NOT NULL,
	a integer NOT NULL DEFAULT 10,
	b integer NOT NULL,
	c integer NOT NULL DEFAULT 20,
	PRIMARY KEY ( pk )
)`,

		`CREATE TABLE minimals (
	pk bigserial NOT NULL,
	PRIMARY KEY ( pk )
)`,

		`CREATE TABLE specials (
	pk bigserial NOT NULL,
	a timestamp with time zone NOT NULL DEFAULT 'epoch',
	b jsonb NOT NULL DEFAULT '{}',
	PRIMARY KEY ( pk )
)`,
	}
}

func (obj *pgxcockroachDB) DropSchema() []string {
	return []string{

		`DROP TABLE IF EXISTS specials`,

		`DROP TABLE IF EXISTS minimals`,

		`DROP TABLE IF EXISTS foos`,

		`DROP TABLE IF EXISTS bazs`,

		`DROP TABLE IF EXISTS bars`,
	}
}

func (obj *pgxcockroachDB) wrapTx(tx *sql.Tx) txMethods {
	return &pgxcockroachTx{
		dialectTx: dialectTx{tx: tx},
		pgxcockroachImpl: &pgxcockroachImpl{
			db:     obj.db,
			driver: tx,
		},
	}
}

type pgxcockroachTx struct {
	dialectTx
	*pgxcockroachImpl
}

func pgxcockroachLogStmt(stmt string, args ...any) {
	// TODO: render placeholders
	if Logger != nil {
		out := fmt.Sprintf("stmt: %s\nargs: %v\n", stmt, pretty(args))
		Logger(out)
	}
}

type spannerImpl struct {
	db      *DB
	dialect __sqlbundle_spanner
	driver  driver
}

func (obj *spannerImpl) Rebind(s string) string {
	return obj.dialect.Rebind(s)
}

func (obj *spannerImpl) logStmt(stmt string, args ...any) {
	spannerLogStmt(stmt, args...)
}

func (obj *spannerImpl) makeErr(err error) error {
	constraint, ok := obj.isConstraintError(err)
	if ok {
		return constraintViolation(err, constraint)
	}
	return makeErr(err)
}

type spannerDB struct {
	db *DB
	*spannerImpl
}

func newspanner(db *DB) *spannerDB {
	return &spannerDB{
		db: db,
		spannerImpl: &spannerImpl{
			db:     db,
			driver: db.DB,
		},
	}
}

func (obj *spannerDB) Schema() []string {
	return []string{

		`CREATE SEQUENCE bars_pk OPTIONS (sequence_kind='bit_reversed_positive')`,

		`CREATE TABLE bars (
	pk INT64 NOT NULL DEFAULT (GET_NEXT_SEQUENCE_VALUE(SEQUENCE bars_pk)),
	a INT64 NOT NULL,
	b INT64 NOT NULL,
	c INT64 NOT NULL DEFAULT (40)
) PRIMARY KEY ( pk )`,

		`CREATE SEQUENCE bazs_pk OPTIONS (sequence_kind='bit_reversed_positive')`,

		`CREATE TABLE bazs (
	pk INT64 NOT NULL DEFAULT (GET_NEXT_SEQUENCE_VALUE(SEQUENCE bazs_pk)),
	a INT64 NOT NULL DEFAULT (50),
	b INT64 NOT NULL DEFAULT (60),
	c INT64 NOT NULL DEFAULT (70)
) PRIMARY KEY ( pk )`,

		`CREATE SEQUENCE foos_pk OPTIONS (sequence_kind='bit_reversed_positive')`,

		`CREATE TABLE foos (
	pk INT64 NOT NULL DEFAULT (GET_NEXT_SEQUENCE_VALUE(SEQUENCE foos_pk)),
	a INT64 NOT NULL DEFAULT (10),
	b INT64 NOT NULL,
	c INT64 NOT NULL DEFAULT (20)
) PRIMARY KEY ( pk )`,

		`CREATE SEQUENCE minimals_pk OPTIONS (sequence_kind='bit_reversed_positive')`,

		`CREATE TABLE minimals (
	pk INT64 NOT NULL DEFAULT (GET_NEXT_SEQUENCE_VALUE(SEQUENCE minimals_pk))
) PRIMARY KEY ( pk )`,

		`CREATE SEQUENCE specials_pk OPTIONS (sequence_kind='bit_reversed_positive')`,

		`CREATE TABLE specials (
	pk INT64 NOT NULL DEFAULT (GET_NEXT_SEQUENCE_VALUE(SEQUENCE specials_pk)),
	a TIMESTAMP NOT NULL DEFAULT (timestamp_seconds(0)),
	b JSON NOT NULL DEFAULT (JSON "{}")
) PRIMARY KEY ( pk )`,
	}
}

func (obj *spannerDB) DropSchema() []string {
	return []string{

		`ALTER TABLE  specials ALTER pk SET DEFAULT (null)`,

		`DROP SEQUENCE IF EXISTS specials_pk`,

		`DROP TABLE IF EXISTS specials`,

		`ALTER TABLE  minimals ALTER pk SET DEFAULT (null)`,

		`DROP SEQUENCE IF EXISTS minimals_pk`,

		`DROP TABLE IF EXISTS minimals`,

		`ALTER TABLE  foos ALTER pk SET DEFAULT (null)`,

		`DROP SEQUENCE IF EXISTS foos_pk`,

		`DROP TABLE IF EXISTS foos`,

		`ALTER TABLE  bazs ALTER pk SET DEFAULT (null)`,

		`DROP SEQUENCE IF EXISTS bazs_pk`,

		`DROP TABLE IF EXISTS bazs`,

		`ALTER TABLE  bars ALTER pk SET DEFAULT (null)`,

		`DROP SEQUENCE IF EXISTS bars_pk`,

		`DROP TABLE IF EXISTS bars`,
	}
}

func (obj *spannerDB) wrapTx(tx *sql.Tx) txMethods {
	return &spannerTx{
		dialectTx: dialectTx{tx: tx},
		spannerImpl: &spannerImpl{
			db:     obj.db,
			driver: tx,
		},
	}
}

type spannerTx struct {
	dialectTx
	*spannerImpl
}

func spannerLogStmt(stmt string, args ...any) {
	// TODO: render placeholders
	if Logger != nil {
		out := fmt.Sprintf("stmt: %s\nargs: %v\n", stmt, pretty(args))
		Logger(out)
	}
}

type pretty []any

func (p pretty) Format(f fmt.State, c rune) {
	fmt.Fprint(f, "[")
nextval:
	for i, val := range p {
		if i > 0 {
			fmt.Fprint(f, ", ")
		}
		rv := reflect.ValueOf(val)
		if rv.Kind() == reflect.Ptr {
			if rv.IsNil() {
				fmt.Fprint(f, "NULL")
				continue
			}
			val = rv.Elem().Interface()
		}
		switch v := val.(type) {
		case string:
			fmt.Fprintf(f, "%q", v)
		case time.Time:
			fmt.Fprintf(f, "%s", v.Format(time.RFC3339Nano))
		case []byte:
			for _, b := range v {
				if !unicode.IsPrint(rune(b)) {
					fmt.Fprintf(f, "%#x", v)
					continue nextval
				}
			}
			fmt.Fprintf(f, "%q", v)
		default:
			fmt.Fprintf(f, "%v", v)
		}
	}
	fmt.Fprint(f, "]")
}

type Bar struct {
	Pk int64
	A  int
	B  int
	C  int
}

func (Bar) _Table() string { return "bars" }

type Bar_Create_Fields struct {
	C Bar_C_Field
}

type Bar_Update_Fields struct {
}

type Bar_Pk_Field struct {
	_set   bool
	_null  bool
	_value int64
}

func Bar_Pk(v int64) Bar_Pk_Field {
	return Bar_Pk_Field{_set: true, _value: v}
}

func (f Bar_Pk_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Bar_Pk_Field) _Column() string { return "pk" }

type Bar_A_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Bar_A(v int) Bar_A_Field {
	return Bar_A_Field{_set: true, _value: v}
}

func (f Bar_A_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Bar_A_Field) _Column() string { return "a" }

type Bar_B_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Bar_B(v int) Bar_B_Field {
	return Bar_B_Field{_set: true, _value: v}
}

func (f Bar_B_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Bar_B_Field) _Column() string { return "b" }

type Bar_C_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Bar_C(v int) Bar_C_Field {
	return Bar_C_Field{_set: true, _value: v}
}

func (f Bar_C_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Bar_C_Field) _Column() string { return "c" }

type Baz struct {
	Pk int64
	A  int
	B  int
	C  int
}

func (Baz) _Table() string { return "bazs" }

type Baz_Create_Fields struct {
	A Baz_A_Field
	B Baz_B_Field
	C Baz_C_Field
}

type Baz_Update_Fields struct {
}

type Baz_Pk_Field struct {
	_set   bool
	_null  bool
	_value int64
}

func Baz_Pk(v int64) Baz_Pk_Field {
	return Baz_Pk_Field{_set: true, _value: v}
}

func (f Baz_Pk_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Baz_Pk_Field) _Column() string { return "pk" }

type Baz_A_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Baz_A(v int) Baz_A_Field {
	return Baz_A_Field{_set: true, _value: v}
}

func (f Baz_A_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Baz_A_Field) _Column() string { return "a" }

type Baz_B_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Baz_B(v int) Baz_B_Field {
	return Baz_B_Field{_set: true, _value: v}
}

func (f Baz_B_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Baz_B_Field) _Column() string { return "b" }

type Baz_C_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Baz_C(v int) Baz_C_Field {
	return Baz_C_Field{_set: true, _value: v}
}

func (f Baz_C_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Baz_C_Field) _Column() string { return "c" }

type Foo struct {
	Pk int64
	A  int
	B  int
	C  int
}

func (Foo) _Table() string { return "foos" }

type Foo_Create_Fields struct {
	C Foo_C_Field
}

type Foo_Update_Fields struct {
}

type Foo_Pk_Field struct {
	_set   bool
	_null  bool
	_value int64
}

func Foo_Pk(v int64) Foo_Pk_Field {
	return Foo_Pk_Field{_set: true, _value: v}
}

func (f Foo_Pk_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Foo_Pk_Field) _Column() string { return "pk" }

type Foo_A_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Foo_A(v int) Foo_A_Field {
	return Foo_A_Field{_set: true, _value: v}
}

func (f Foo_A_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Foo_A_Field) _Column() string { return "a" }

type Foo_B_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Foo_B(v int) Foo_B_Field {
	return Foo_B_Field{_set: true, _value: v}
}

func (f Foo_B_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Foo_B_Field) _Column() string { return "b" }

type Foo_C_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Foo_C(v int) Foo_C_Field {
	return Foo_C_Field{_set: true, _value: v}
}

func (f Foo_C_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Foo_C_Field) _Column() string { return "c" }

type Minimal struct {
	Pk int64
}

func (Minimal) _Table() string { return "minimals" }

type Minimal_Update_Fields struct {
}

type Minimal_Pk_Field struct {
	_set   bool
	_null  bool
	_value int64
}

func Minimal_Pk(v int64) Minimal_Pk_Field {
	return Minimal_Pk_Field{_set: true, _value: v}
}

func (f Minimal_Pk_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Minimal_Pk_Field) _Column() string { return "pk" }

type Special struct {
	Pk int64
	A  time.Time
	B  []byte
}

func (Special) _Table() string { return "specials" }

type Special_Create_Fields struct {
	A Special_A_Field
	B Special_B_Field
}

type Special_Update_Fields struct {
}

type Special_Pk_Field struct {
	_set   bool
	_null  bool
	_value int64
}

func Special_Pk(v int64) Special_Pk_Field {
	return Special_Pk_Field{_set: true, _value: v}
}

func (f Special_Pk_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Special_Pk_Field) _Column() string { return "pk" }

type Special_A_Field struct {
	_set   bool
	_null  bool
	_value time.Time
}

func Special_A(v time.Time) Special_A_Field {
	return Special_A_Field{_set: true, _value: v}
}

func (f Special_A_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Special_A_Field) _Column() string { return "a" }

type Special_B_Field struct {
	_set   bool
	_null  bool
	_value []byte
}

func Special_B(v []byte) Special_B_Field {
	return Special_B_Field{_set: true, _value: v}
}

func (f Special_B_Field) value() any {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Special_B_Field) _Column() string { return "b" }

func toUTC(t time.Time) time.Time {
	return t.UTC()
}

func toDate(t time.Time) time.Time {
	// keep up the minute portion so that translations between timezones will
	// continue to reflect properly.
	return t.Truncate(time.Minute)
}

//
// runtime support for building sql statements
//

type __sqlbundle_SQL interface {
	Render() string

	private()
}

type __sqlbundle_Dialect interface {
	// Rebind gives the opportunity to rewrite provided SQL into a SQL dialect.
	Rebind(sql string) string
}

type __sqlbundle_RenderOp int

const (
	__sqlbundle_NoFlatten __sqlbundle_RenderOp = iota
	__sqlbundle_NoTerminate
)

func __sqlbundle_RenderAll(dialect __sqlbundle_Dialect, sqls []__sqlbundle_SQL, ops ...__sqlbundle_RenderOp) []string {
	var rs []string
	for _, sql := range sqls {
		rs = append(rs, __sqlbundle_Render(dialect, sql, ops...))
	}
	return rs
}

func __sqlbundle_Render(dialect __sqlbundle_Dialect, sql __sqlbundle_SQL, ops ...__sqlbundle_RenderOp) string {
	out := sql.Render()

	flatten := true
	terminate := true
	for _, op := range ops {
		switch op {
		case __sqlbundle_NoFlatten:
			flatten = false
		case __sqlbundle_NoTerminate:
			terminate = false
		}
	}

	if flatten {
		out = __sqlbundle_flattenSQL(out)
	}
	if terminate {
		out += ";"
	}

	return dialect.Rebind(out)
}

func __sqlbundle_flattenSQL(x string) string {
	// trim whitespace from beginning and end
	s, e := 0, len(x)-1
	for s < len(x) && (x[s] == ' ' || x[s] == '\t' || x[s] == '\n') {
		s++
	}
	for s <= e && (x[e] == ' ' || x[e] == '\t' || x[e] == '\n') {
		e--
	}
	if s > e {
		return ""
	}
	x = x[s : e+1]

	// check for whitespace that needs fixing
	wasSpace := false
	for i := 0; i < len(x); i++ {
		r := x[i]
		justSpace := r == ' '
		if (wasSpace && justSpace) || r == '\t' || r == '\n' {
			// whitespace detected, start writing a new string
			var result strings.Builder
			result.Grow(len(x))
			if wasSpace {
				result.WriteString(x[:i-1])
			} else {
				result.WriteString(x[:i])
			}
			for p := i; p < len(x); p++ {
				for p < len(x) && (x[p] == ' ' || x[p] == '\t' || x[p] == '\n') {
					p++
				}
				result.WriteByte(' ')

				start := p
				for p < len(x) && !(x[p] == ' ' || x[p] == '\t' || x[p] == '\n') {
					p++
				}
				result.WriteString(x[start:p])
			}

			return result.String()
		}
		wasSpace = justSpace
	}

	// no problematic whitespace found
	return x
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_cockroach struct{}

func (p __sqlbundle_cockroach) Rebind(sql string) string {
	return __sqlbundle_postgres{}.Rebind(sql)
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_pgx struct{}

func (p __sqlbundle_pgx) Rebind(sql string) string {
	return __sqlbundle_postgres{}.Rebind(sql)
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_pgxcockroach struct{}

func (p __sqlbundle_pgxcockroach) Rebind(sql string) string {
	return __sqlbundle_postgres{}.Rebind(sql)
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_postgres struct{}

func (p __sqlbundle_postgres) Rebind(sql string) string {
	type sqlParseState int
	const (
		sqlParseStart sqlParseState = iota
		sqlParseInStringLiteral
		sqlParseInQuotedIdentifier
		sqlParseInComment
	)

	out := make([]byte, 0, len(sql)+10)

	j := 1
	state := sqlParseStart
	for i := 0; i < len(sql); i++ {
		ch := sql[i]
		switch state {
		case sqlParseStart:
			switch ch {
			case '?':
				out = append(out, '$')
				out = append(out, strconv.Itoa(j)...)
				state = sqlParseStart
				j++
				continue
			case '-':
				if i+1 < len(sql) && sql[i+1] == '-' {
					state = sqlParseInComment
				}
			case '"':
				state = sqlParseInQuotedIdentifier
			case '\'':
				state = sqlParseInStringLiteral
			}
		case sqlParseInStringLiteral:
			if ch == '\'' {
				state = sqlParseStart
			}
		case sqlParseInQuotedIdentifier:
			if ch == '"' {
				state = sqlParseStart
			}
		case sqlParseInComment:
			if ch == '\n' {
				state = sqlParseStart
			}
		}
		out = append(out, ch)
	}

	return string(out)
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_spanner struct{}

func (p __sqlbundle_spanner) Rebind(sql string) string {
	return sql
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_sqlite3 struct{}

func (s __sqlbundle_sqlite3) Rebind(sql string) string {
	return sql
}

type __sqlbundle_Literal string

func (__sqlbundle_Literal) private() {}

func (l __sqlbundle_Literal) Render() string { return string(l) }

type __sqlbundle_Literals struct {
	Join string
	SQLs []__sqlbundle_SQL
}

func (__sqlbundle_Literals) private() {}

func (l __sqlbundle_Literals) Render() string {
	var out bytes.Buffer

	first := true
	for _, sql := range l.SQLs {
		if sql == nil {
			continue
		}
		if !first {
			out.WriteString(l.Join)
		}
		first = false
		out.WriteString(sql.Render())
	}

	return out.String()
}

type __sqlbundle_Condition struct {
	// set at compile/embed time
	Name  string
	Left  string
	Equal bool
	Right string

	// set at runtime
	Null bool
}

func (*__sqlbundle_Condition) private() {}

func (c *__sqlbundle_Condition) Render() string {
	// TODO(jeff): maybe check if we can use placeholders instead of the
	// literal null: this would make the templates easier.

	switch {
	case c.Equal && c.Null:
		return c.Left + " is null"
	case c.Equal && !c.Null:
		return c.Left + " = " + c.Right
	case !c.Equal && c.Null:
		return c.Left + " is not null"
	case !c.Equal && !c.Null:
		return c.Left + " != " + c.Right
	default:
		panic("unhandled case")
	}
}

type __sqlbundle_Hole struct {
	// set at compiile/embed time
	Name string

	// set at runtime or possibly embed time
	SQL __sqlbundle_SQL
}

func (*__sqlbundle_Hole) private() {}

func (h *__sqlbundle_Hole) Render() string {
	if h.SQL == nil {
		return ""
	}
	return h.SQL.Render()
}

//
// end runtime support for building sql statements
//

func (obj *sqlite3Impl) Create_Foo(ctx context.Context,
	optional Foo_Create_Fields) (
	foo *Foo, err error) {
	__b_val := int(0)

	var __columns = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("b")}
	var __placeholders = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("?")}
	var __clause = &__sqlbundle_Hole{SQL: __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("("), __columns, __sqlbundle_Literal(") VALUES ("), __placeholders, __sqlbundle_Literal(")")}}}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("INSERT INTO foos "), __clause}}

	var __values []any
	__values = append(__values, __b_val)

	__optional_columns := __sqlbundle_Literals{Join: ", "}
	__optional_placeholders := __sqlbundle_Literals{Join: ", "}

	if optional.C._set {
		__values = append(__values, optional.C.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if len(__optional_columns.SQLs) == 0 {
		if __columns.SQL == nil {
			__clause.SQL = __sqlbundle_Literal("DEFAULT VALUES")
		}
	} else {
		__columns.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__columns.SQL, __optional_columns}}
		__placeholders.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__placeholders.SQL, __optional_placeholders}}
	}
	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__res, err := obj.driver.ExecContext(ctx, __stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastFoo(ctx, __pk)

}

func (obj *sqlite3Impl) Create_Bar(ctx context.Context,
	bar_a Bar_A_Field,
	bar_b Bar_B_Field,
	optional Bar_Create_Fields) (
	bar *Bar, err error) {
	__a_val := bar_a.value()
	__b_val := bar_b.value()

	var __columns = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("a, b")}
	var __placeholders = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("?, ?")}
	var __clause = &__sqlbundle_Hole{SQL: __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("("), __columns, __sqlbundle_Literal(") VALUES ("), __placeholders, __sqlbundle_Literal(")")}}}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("INSERT INTO bars "), __clause}}

	var __values []any
	__values = append(__values, __a_val, __b_val)

	__optional_columns := __sqlbundle_Literals{Join: ", "}
	__optional_placeholders := __sqlbundle_Literals{Join: ", "}

	if optional.C._set {
		__values = append(__values, optional.C.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if len(__optional_columns.SQLs) == 0 {
		if __columns.SQL == nil {
			__clause.SQL = __sqlbundle_Literal("DEFAULT VALUES")
		}
	} else {
		__columns.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__columns.SQL, __optional_columns}}
		__placeholders.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__placeholders.SQL, __optional_placeholders}}
	}
	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__res, err := obj.driver.ExecContext(ctx, __stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastBar(ctx, __pk)

}

func (obj *sqlite3Impl) Create_Baz(ctx context.Context,
	optional Baz_Create_Fields) (
	baz *Baz, err error) {

	var __columns = &__sqlbundle_Hole{}
	var __placeholders = &__sqlbundle_Hole{}
	var __clause = &__sqlbundle_Hole{SQL: __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("("), __columns, __sqlbundle_Literal(") VALUES ("), __placeholders, __sqlbundle_Literal(")")}}}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("INSERT INTO bazs "), __clause}}

	var __values []any

	__optional_columns := __sqlbundle_Literals{Join: ", "}
	__optional_placeholders := __sqlbundle_Literals{Join: ", "}

	if optional.A._set {
		__values = append(__values, optional.A.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("a"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if optional.B._set {
		__values = append(__values, optional.B.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("b"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if optional.C._set {
		__values = append(__values, optional.C.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if len(__optional_columns.SQLs) == 0 {
		if __columns.SQL == nil {
			__clause.SQL = __sqlbundle_Literal("DEFAULT VALUES")
		}
	} else {
		__columns.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__columns.SQL, __optional_columns}}
		__placeholders.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__placeholders.SQL, __optional_placeholders}}
	}
	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__res, err := obj.driver.ExecContext(ctx, __stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastBaz(ctx, __pk)

}

func (obj *sqlite3Impl) Create_Minimal(ctx context.Context) (
	minimal *Minimal, err error) {

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO minimals DEFAULT VALUES")

	var __values []any

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__res, err := obj.driver.ExecContext(ctx, __stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastMinimal(ctx, __pk)

}

func (obj *sqlite3Impl) Get_Foo_By_Pk(ctx context.Context,
	foo_pk Foo_Pk_Field) (
	foo *Foo, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT foos.pk, foos.a, foos.b, foos.c FROM foos WHERE foos.pk = ?")

	var __values []any
	__values = append(__values, foo_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	foo = &Foo{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&foo.Pk, &foo.A, &foo.B, &foo.C)
	if err != nil {
		return (*Foo)(nil), obj.makeErr(err)
	}
	return foo, nil

}

func (obj *sqlite3Impl) Get_Bar_By_Pk(ctx context.Context,
	bar_pk Bar_Pk_Field) (
	bar *Bar, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT bars.pk, bars.a, bars.b, bars.c FROM bars WHERE bars.pk = ?")

	var __values []any
	__values = append(__values, bar_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	bar = &Bar{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&bar.Pk, &bar.A, &bar.B, &bar.C)
	if err != nil {
		return (*Bar)(nil), obj.makeErr(err)
	}
	return bar, nil

}

func (obj *sqlite3Impl) Get_Baz_By_Pk(ctx context.Context,
	baz_pk Baz_Pk_Field) (
	baz *Baz, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT bazs.pk, bazs.a, bazs.b, bazs.c FROM bazs WHERE bazs.pk = ?")

	var __values []any
	__values = append(__values, baz_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	baz = &Baz{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&baz.Pk, &baz.A, &baz.B, &baz.C)
	if err != nil {
		return (*Baz)(nil), obj.makeErr(err)
	}
	return baz, nil

}

func (obj *sqlite3Impl) getLastFoo(ctx context.Context,
	pk int64) (
	foo *Foo, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT foos.pk, foos.a, foos.b, foos.c FROM foos WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	foo = &Foo{}
	err = obj.driver.QueryRowContext(ctx, __stmt, pk).Scan(&foo.Pk, &foo.A, &foo.B, &foo.C)
	if err != nil {
		return (*Foo)(nil), obj.makeErr(err)
	}
	return foo, nil

}

func (obj *sqlite3Impl) getLastBar(ctx context.Context,
	pk int64) (
	bar *Bar, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT bars.pk, bars.a, bars.b, bars.c FROM bars WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	bar = &Bar{}
	err = obj.driver.QueryRowContext(ctx, __stmt, pk).Scan(&bar.Pk, &bar.A, &bar.B, &bar.C)
	if err != nil {
		return (*Bar)(nil), obj.makeErr(err)
	}
	return bar, nil

}

func (obj *sqlite3Impl) getLastBaz(ctx context.Context,
	pk int64) (
	baz *Baz, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT bazs.pk, bazs.a, bazs.b, bazs.c FROM bazs WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	baz = &Baz{}
	err = obj.driver.QueryRowContext(ctx, __stmt, pk).Scan(&baz.Pk, &baz.A, &baz.B, &baz.C)
	if err != nil {
		return (*Baz)(nil), obj.makeErr(err)
	}
	return baz, nil

}

func (obj *sqlite3Impl) getLastMinimal(ctx context.Context,
	pk int64) (
	minimal *Minimal, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT minimals.pk FROM minimals WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	minimal = &Minimal{}
	err = obj.driver.QueryRowContext(ctx, __stmt, pk).Scan(&minimal.Pk)
	if err != nil {
		return (*Minimal)(nil), obj.makeErr(err)
	}
	return minimal, nil

}

func (impl sqlite3Impl) isConstraintError(err error) (constraint string, ok bool) {
	if e, ok := err.(sqlite3.Error); ok {
		if e.Code == sqlite3.ErrConstraint {
			msg := err.Error()
			colon := strings.LastIndex(msg, ":")
			if colon != -1 {
				return strings.TrimSpace(msg[colon:]), true
			}
			return "", true
		}
	}
	return "", false
}

func (obj *sqlite3Impl) deleteAll(ctx context.Context) (count int64, err error) {
	var __res sql.Result
	var __count int64
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM specials;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM minimals;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM foos;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM bazs;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM bars;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count

	return count, nil

}

func (obj *pgxImpl) Create_Foo(ctx context.Context,
	optional Foo_Create_Fields) (
	foo *Foo, err error) {
	__b_val := int(0)

	var __columns = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("b")}
	var __placeholders = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("?")}
	var __clause = &__sqlbundle_Hole{SQL: __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("("), __columns, __sqlbundle_Literal(") VALUES ("), __placeholders, __sqlbundle_Literal(")")}}}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("INSERT INTO foos "), __clause, __sqlbundle_Literal(" RETURNING foos.pk, foos.a, foos.b, foos.c")}}

	var __values []any
	__values = append(__values, __b_val)

	__optional_columns := __sqlbundle_Literals{Join: ", "}
	__optional_placeholders := __sqlbundle_Literals{Join: ", "}

	if optional.C._set {
		__values = append(__values, optional.C.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if len(__optional_columns.SQLs) == 0 {
		if __columns.SQL == nil {
			__clause.SQL = __sqlbundle_Literal("DEFAULT VALUES")
		}
	} else {
		__columns.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__columns.SQL, __optional_columns}}
		__placeholders.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__placeholders.SQL, __optional_placeholders}}
	}
	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	foo = &Foo{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&foo.Pk, &foo.A, &foo.B, &foo.C)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return foo, nil

}

func (obj *pgxImpl) Create_Bar(ctx context.Context,
	bar_a Bar_A_Field,
	bar_b Bar_B_Field,
	optional Bar_Create_Fields) (
	bar *Bar, err error) {
	__a_val := bar_a.value()
	__b_val := bar_b.value()

	var __columns = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("a, b")}
	var __placeholders = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("?, ?")}
	var __clause = &__sqlbundle_Hole{SQL: __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("("), __columns, __sqlbundle_Literal(") VALUES ("), __placeholders, __sqlbundle_Literal(")")}}}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("INSERT INTO bars "), __clause, __sqlbundle_Literal(" RETURNING bars.pk, bars.a, bars.b, bars.c")}}

	var __values []any
	__values = append(__values, __a_val, __b_val)

	__optional_columns := __sqlbundle_Literals{Join: ", "}
	__optional_placeholders := __sqlbundle_Literals{Join: ", "}

	if optional.C._set {
		__values = append(__values, optional.C.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if len(__optional_columns.SQLs) == 0 {
		if __columns.SQL == nil {
			__clause.SQL = __sqlbundle_Literal("DEFAULT VALUES")
		}
	} else {
		__columns.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__columns.SQL, __optional_columns}}
		__placeholders.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__placeholders.SQL, __optional_placeholders}}
	}
	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	bar = &Bar{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&bar.Pk, &bar.A, &bar.B, &bar.C)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return bar, nil

}

func (obj *pgxImpl) Create_Baz(ctx context.Context,
	optional Baz_Create_Fields) (
	baz *Baz, err error) {

	var __columns = &__sqlbundle_Hole{}
	var __placeholders = &__sqlbundle_Hole{}
	var __clause = &__sqlbundle_Hole{SQL: __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("("), __columns, __sqlbundle_Literal(") VALUES ("), __placeholders, __sqlbundle_Literal(")")}}}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("INSERT INTO bazs "), __clause, __sqlbundle_Literal(" RETURNING bazs.pk, bazs.a, bazs.b, bazs.c")}}

	var __values []any

	__optional_columns := __sqlbundle_Literals{Join: ", "}
	__optional_placeholders := __sqlbundle_Literals{Join: ", "}

	if optional.A._set {
		__values = append(__values, optional.A.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("a"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if optional.B._set {
		__values = append(__values, optional.B.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("b"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if optional.C._set {
		__values = append(__values, optional.C.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if len(__optional_columns.SQLs) == 0 {
		if __columns.SQL == nil {
			__clause.SQL = __sqlbundle_Literal("DEFAULT VALUES")
		}
	} else {
		__columns.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__columns.SQL, __optional_columns}}
		__placeholders.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__placeholders.SQL, __optional_placeholders}}
	}
	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	baz = &Baz{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&baz.Pk, &baz.A, &baz.B, &baz.C)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return baz, nil

}

func (obj *pgxImpl) Create_Minimal(ctx context.Context) (
	minimal *Minimal, err error) {

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO minimals DEFAULT VALUES RETURNING minimals.pk")

	var __values []any

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	minimal = &Minimal{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&minimal.Pk)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return minimal, nil

}

func (obj *pgxImpl) Get_Foo_By_Pk(ctx context.Context,
	foo_pk Foo_Pk_Field) (
	foo *Foo, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT foos.pk, foos.a, foos.b, foos.c FROM foos WHERE foos.pk = ?")

	var __values []any
	__values = append(__values, foo_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	foo = &Foo{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&foo.Pk, &foo.A, &foo.B, &foo.C)
	if err != nil {
		return (*Foo)(nil), obj.makeErr(err)
	}
	return foo, nil

}

func (obj *pgxImpl) Get_Bar_By_Pk(ctx context.Context,
	bar_pk Bar_Pk_Field) (
	bar *Bar, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT bars.pk, bars.a, bars.b, bars.c FROM bars WHERE bars.pk = ?")

	var __values []any
	__values = append(__values, bar_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	bar = &Bar{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&bar.Pk, &bar.A, &bar.B, &bar.C)
	if err != nil {
		return (*Bar)(nil), obj.makeErr(err)
	}
	return bar, nil

}

func (obj *pgxImpl) Get_Baz_By_Pk(ctx context.Context,
	baz_pk Baz_Pk_Field) (
	baz *Baz, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT bazs.pk, bazs.a, bazs.b, bazs.c FROM bazs WHERE bazs.pk = ?")

	var __values []any
	__values = append(__values, baz_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	baz = &Baz{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&baz.Pk, &baz.A, &baz.B, &baz.C)
	if err != nil {
		return (*Baz)(nil), obj.makeErr(err)
	}
	return baz, nil

}

func (impl pgxImpl) isConstraintError(err error) (constraint string, ok bool) {
	if e, ok := err.(*pgconn.PgError); ok {
		if e.Code[:2] == "23" {
			return e.ConstraintName, true
		}
	}
	return "", false
}

func (obj *pgxImpl) deleteAll(ctx context.Context) (count int64, err error) {
	var __res sql.Result
	var __count int64
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM specials;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM minimals;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM foos;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM bazs;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM bars;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count

	return count, nil

}

func (obj *pgxcockroachImpl) Create_Foo(ctx context.Context,
	optional Foo_Create_Fields) (
	foo *Foo, err error) {
	__b_val := int(0)

	var __columns = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("b")}
	var __placeholders = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("?")}
	var __clause = &__sqlbundle_Hole{SQL: __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("("), __columns, __sqlbundle_Literal(") VALUES ("), __placeholders, __sqlbundle_Literal(")")}}}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("INSERT INTO foos "), __clause, __sqlbundle_Literal(" RETURNING foos.pk, foos.a, foos.b, foos.c")}}

	var __values []any
	__values = append(__values, __b_val)

	__optional_columns := __sqlbundle_Literals{Join: ", "}
	__optional_placeholders := __sqlbundle_Literals{Join: ", "}

	if optional.C._set {
		__values = append(__values, optional.C.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if len(__optional_columns.SQLs) == 0 {
		if __columns.SQL == nil {
			__clause.SQL = __sqlbundle_Literal("DEFAULT VALUES")
		}
	} else {
		__columns.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__columns.SQL, __optional_columns}}
		__placeholders.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__placeholders.SQL, __optional_placeholders}}
	}
	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	foo = &Foo{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&foo.Pk, &foo.A, &foo.B, &foo.C)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return foo, nil

}

func (obj *pgxcockroachImpl) Create_Bar(ctx context.Context,
	bar_a Bar_A_Field,
	bar_b Bar_B_Field,
	optional Bar_Create_Fields) (
	bar *Bar, err error) {
	__a_val := bar_a.value()
	__b_val := bar_b.value()

	var __columns = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("a, b")}
	var __placeholders = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("?, ?")}
	var __clause = &__sqlbundle_Hole{SQL: __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("("), __columns, __sqlbundle_Literal(") VALUES ("), __placeholders, __sqlbundle_Literal(")")}}}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("INSERT INTO bars "), __clause, __sqlbundle_Literal(" RETURNING bars.pk, bars.a, bars.b, bars.c")}}

	var __values []any
	__values = append(__values, __a_val, __b_val)

	__optional_columns := __sqlbundle_Literals{Join: ", "}
	__optional_placeholders := __sqlbundle_Literals{Join: ", "}

	if optional.C._set {
		__values = append(__values, optional.C.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if len(__optional_columns.SQLs) == 0 {
		if __columns.SQL == nil {
			__clause.SQL = __sqlbundle_Literal("DEFAULT VALUES")
		}
	} else {
		__columns.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__columns.SQL, __optional_columns}}
		__placeholders.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__placeholders.SQL, __optional_placeholders}}
	}
	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	bar = &Bar{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&bar.Pk, &bar.A, &bar.B, &bar.C)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return bar, nil

}

func (obj *pgxcockroachImpl) Create_Baz(ctx context.Context,
	optional Baz_Create_Fields) (
	baz *Baz, err error) {

	var __columns = &__sqlbundle_Hole{}
	var __placeholders = &__sqlbundle_Hole{}
	var __clause = &__sqlbundle_Hole{SQL: __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("("), __columns, __sqlbundle_Literal(") VALUES ("), __placeholders, __sqlbundle_Literal(")")}}}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("INSERT INTO bazs "), __clause, __sqlbundle_Literal(" RETURNING bazs.pk, bazs.a, bazs.b, bazs.c")}}

	var __values []any

	__optional_columns := __sqlbundle_Literals{Join: ", "}
	__optional_placeholders := __sqlbundle_Literals{Join: ", "}

	if optional.A._set {
		__values = append(__values, optional.A.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("a"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if optional.B._set {
		__values = append(__values, optional.B.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("b"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if optional.C._set {
		__values = append(__values, optional.C.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if len(__optional_columns.SQLs) == 0 {
		if __columns.SQL == nil {
			__clause.SQL = __sqlbundle_Literal("DEFAULT VALUES")
		}
	} else {
		__columns.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__columns.SQL, __optional_columns}}
		__placeholders.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__placeholders.SQL, __optional_placeholders}}
	}
	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	baz = &Baz{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&baz.Pk, &baz.A, &baz.B, &baz.C)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return baz, nil

}

func (obj *pgxcockroachImpl) Create_Minimal(ctx context.Context) (
	minimal *Minimal, err error) {

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO minimals DEFAULT VALUES RETURNING minimals.pk")

	var __values []any

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	minimal = &Minimal{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&minimal.Pk)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return minimal, nil

}

func (obj *pgxcockroachImpl) Get_Foo_By_Pk(ctx context.Context,
	foo_pk Foo_Pk_Field) (
	foo *Foo, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT foos.pk, foos.a, foos.b, foos.c FROM foos WHERE foos.pk = ?")

	var __values []any
	__values = append(__values, foo_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	foo = &Foo{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&foo.Pk, &foo.A, &foo.B, &foo.C)
	if err != nil {
		return (*Foo)(nil), obj.makeErr(err)
	}
	return foo, nil

}

func (obj *pgxcockroachImpl) Get_Bar_By_Pk(ctx context.Context,
	bar_pk Bar_Pk_Field) (
	bar *Bar, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT bars.pk, bars.a, bars.b, bars.c FROM bars WHERE bars.pk = ?")

	var __values []any
	__values = append(__values, bar_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	bar = &Bar{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&bar.Pk, &bar.A, &bar.B, &bar.C)
	if err != nil {
		return (*Bar)(nil), obj.makeErr(err)
	}
	return bar, nil

}

func (obj *pgxcockroachImpl) Get_Baz_By_Pk(ctx context.Context,
	baz_pk Baz_Pk_Field) (
	baz *Baz, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT bazs.pk, bazs.a, bazs.b, bazs.c FROM bazs WHERE bazs.pk = ?")

	var __values []any
	__values = append(__values, baz_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	baz = &Baz{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&baz.Pk, &baz.A, &baz.B, &baz.C)
	if err != nil {
		return (*Baz)(nil), obj.makeErr(err)
	}
	return baz, nil

}

func (impl pgxcockroachImpl) isConstraintError(err error) (constraint string, ok bool) {
	if e, ok := err.(*pgconn.PgError); ok {
		if e.Code[:2] == "23" {
			return e.ConstraintName, true
		}
	}
	return "", false
}

func (obj *pgxcockroachImpl) deleteAll(ctx context.Context) (count int64, err error) {
	var __res sql.Result
	var __count int64
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM specials;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM minimals;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM foos;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM bazs;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM bars;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count

	return count, nil

}

func (obj *spannerImpl) Create_Foo(ctx context.Context,
	optional Foo_Create_Fields) (
	foo *Foo, err error) {
	__b_val := int(0)

	var __columns = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("b")}
	var __placeholders = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("?")}
	var __clause = &__sqlbundle_Hole{SQL: __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("("), __columns, __sqlbundle_Literal(") VALUES ("), __placeholders, __sqlbundle_Literal(")")}}}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("INSERT INTO foos "), __clause, __sqlbundle_Literal(" THEN RETURN foos.pk, foos.a, foos.b, foos.c")}}

	var __values []any
	__values = append(__values, __b_val)

	__optional_columns := __sqlbundle_Literals{Join: ", "}
	__optional_placeholders := __sqlbundle_Literals{Join: ", "}

	if optional.C._set {
		__values = append(__values, optional.C.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if len(__optional_columns.SQLs) == 0 && __columns.SQL == nil {

		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("DEFAULT"))

	}

	if len(__optional_columns.SQLs) > 0 {
		__columns.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__columns.SQL, __optional_columns}}
		__placeholders.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__placeholders.SQL, __optional_placeholders}}
	}

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	foo = &Foo{}
	tx, err := obj.db.DB.BeginTx(ctx, nil)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	err = tx.QueryRowContext(ctx, __stmt, __values...).Scan(&foo.Pk, &foo.A, &foo.B, &foo.C)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	err = tx.Commit()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return foo, nil

}

func (obj *spannerImpl) Create_Bar(ctx context.Context,
	bar_a Bar_A_Field,
	bar_b Bar_B_Field,
	optional Bar_Create_Fields) (
	bar *Bar, err error) {
	__a_val := bar_a.value()
	__b_val := bar_b.value()

	var __columns = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("a, b")}
	var __placeholders = &__sqlbundle_Hole{SQL: __sqlbundle_Literal("?, ?")}
	var __clause = &__sqlbundle_Hole{SQL: __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("("), __columns, __sqlbundle_Literal(") VALUES ("), __placeholders, __sqlbundle_Literal(")")}}}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("INSERT INTO bars "), __clause, __sqlbundle_Literal(" THEN RETURN bars.pk, bars.a, bars.b, bars.c")}}

	var __values []any
	__values = append(__values, __a_val, __b_val)

	__optional_columns := __sqlbundle_Literals{Join: ", "}
	__optional_placeholders := __sqlbundle_Literals{Join: ", "}

	if optional.C._set {
		__values = append(__values, optional.C.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if len(__optional_columns.SQLs) == 0 && __columns.SQL == nil {

		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("DEFAULT"))

	}

	if len(__optional_columns.SQLs) > 0 {
		__columns.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__columns.SQL, __optional_columns}}
		__placeholders.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__placeholders.SQL, __optional_placeholders}}
	}

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	bar = &Bar{}
	tx, err := obj.db.DB.BeginTx(ctx, nil)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	err = tx.QueryRowContext(ctx, __stmt, __values...).Scan(&bar.Pk, &bar.A, &bar.B, &bar.C)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	err = tx.Commit()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return bar, nil

}

func (obj *spannerImpl) Create_Baz(ctx context.Context,
	optional Baz_Create_Fields) (
	baz *Baz, err error) {

	var __columns = &__sqlbundle_Hole{}
	var __placeholders = &__sqlbundle_Hole{}
	var __clause = &__sqlbundle_Hole{SQL: __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("("), __columns, __sqlbundle_Literal(") VALUES ("), __placeholders, __sqlbundle_Literal(")")}}}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("INSERT INTO bazs "), __clause, __sqlbundle_Literal(" THEN RETURN bazs.pk, bazs.a, bazs.b, bazs.c")}}

	var __values []any

	__optional_columns := __sqlbundle_Literals{Join: ", "}
	__optional_placeholders := __sqlbundle_Literals{Join: ", "}

	if optional.A._set {
		__values = append(__values, optional.A.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("a"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if optional.B._set {
		__values = append(__values, optional.B.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("b"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if optional.C._set {
		__values = append(__values, optional.C.value())
		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("?"))
	}

	if len(__optional_columns.SQLs) == 0 && __columns.SQL == nil {

		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("a"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("DEFAULT"))

		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("b"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("DEFAULT"))

		__optional_columns.SQLs = append(__optional_columns.SQLs, __sqlbundle_Literal("c"))
		__optional_placeholders.SQLs = append(__optional_placeholders.SQLs, __sqlbundle_Literal("DEFAULT"))

	}

	if len(__optional_columns.SQLs) > 0 {
		__columns.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__columns.SQL, __optional_columns}}
		__placeholders.SQL = __sqlbundle_Literals{Join: ", ", SQLs: []__sqlbundle_SQL{__placeholders.SQL, __optional_placeholders}}
	}

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	baz = &Baz{}
	tx, err := obj.db.DB.BeginTx(ctx, nil)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	err = tx.QueryRowContext(ctx, __stmt, __values...).Scan(&baz.Pk, &baz.A, &baz.B, &baz.C)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	err = tx.Commit()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return baz, nil

}

func (obj *spannerImpl) Create_Minimal(ctx context.Context) (
	minimal *Minimal, err error) {

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO minimals ( pk ) VALUES ( DEFAULT ) THEN RETURN minimals.pk")

	var __values []any

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	minimal = &Minimal{}
	tx, err := obj.db.DB.BeginTx(ctx, nil)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	err = tx.QueryRowContext(ctx, __stmt, __values...).Scan(&minimal.Pk)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	err = tx.Commit()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return minimal, nil

}

func (obj *spannerImpl) Get_Foo_By_Pk(ctx context.Context,
	foo_pk Foo_Pk_Field) (
	foo *Foo, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT foos.pk, foos.a, foos.b, foos.c FROM foos WHERE foos.pk = ?")

	var __values []any
	__values = append(__values, foo_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	foo = &Foo{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&foo.Pk, &foo.A, &foo.B, &foo.C)
	if err != nil {
		return (*Foo)(nil), obj.makeErr(err)
	}
	return foo, nil

}

func (obj *spannerImpl) Get_Bar_By_Pk(ctx context.Context,
	bar_pk Bar_Pk_Field) (
	bar *Bar, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT bars.pk, bars.a, bars.b, bars.c FROM bars WHERE bars.pk = ?")

	var __values []any
	__values = append(__values, bar_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	bar = &Bar{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&bar.Pk, &bar.A, &bar.B, &bar.C)
	if err != nil {
		return (*Bar)(nil), obj.makeErr(err)
	}
	return bar, nil

}

func (obj *spannerImpl) Get_Baz_By_Pk(ctx context.Context,
	baz_pk Baz_Pk_Field) (
	baz *Baz, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT bazs.pk, bazs.a, bazs.b, bazs.c FROM bazs WHERE bazs.pk = ?")

	var __values []any
	__values = append(__values, baz_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	baz = &Baz{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&baz.Pk, &baz.A, &baz.B, &baz.C)
	if err != nil {
		return (*Baz)(nil), obj.makeErr(err)
	}
	return baz, nil

}

func (impl spannerImpl) isConstraintError(err error) (constraint string, ok bool) {
	return "", false
}

func (obj *spannerImpl) deleteAll(ctx context.Context) (count int64, err error) {
	var __res sql.Result
	var __count int64
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM specials;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM minimals;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM foos;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM bazs;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM bars;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count

	return count, nil

}

type Methods interface {
	Create_Bar(ctx context.Context,
		bar_a Bar_A_Field,
		bar_b Bar_B_Field,
		optional Bar_Create_Fields) (
		bar *Bar, err error)

	Create_Baz(ctx context.Context,
		optional Baz_Create_Fields) (
		baz *Baz, err error)

	Create_Foo(ctx context.Context,
		optional Foo_Create_Fields) (
		foo *Foo, err error)

	Create_Minimal(ctx context.Context) (
		minimal *Minimal, err error)

	Get_Bar_By_Pk(ctx context.Context,
		bar_pk Bar_Pk_Field) (
		bar *Bar, err error)

	Get_Baz_By_Pk(ctx context.Context,
		baz_pk Baz_Pk_Field) (
		baz *Baz, err error)

	Get_Foo_By_Pk(ctx context.Context,
		foo_pk Foo_Pk_Field) (
		foo *Foo, err error)
}

type TxMethods interface {
	Methods

	Rebind(s string) string
	Commit() error
	Rollback() error
}

type txMethods interface {
	TxMethods

	deleteAll(ctx context.Context) (int64, error)
	makeErr(err error) error
}

type DBMethods interface {
	Methods

	Schema() []string
	DropSchema() []string

	Rebind(sql string) string
}

type dbMethods interface {
	DBMethods

	wrapTx(tx *sql.Tx) txMethods
	makeErr(err error) error
}

var sqlite3DriverName = func() string {
	var id [16]byte
	_, _ = rand.Read(id[:])
	return fmt.Sprintf("sqlite3_%x", string(id[:]))
}()

func init() {
	sql.Register(sqlite3DriverName, &sqlite3.SQLiteDriver{
		ConnectHook: sqlite3SetupConn,
	})
}

// SQLite3JournalMode controls the journal_mode pragma for all new connections.
// Since it is read without a mutex, it must be changed to the value you want
// before any Open calls.
var SQLite3JournalMode = "WAL"

func sqlite3SetupConn(conn *sqlite3.SQLiteConn) (err error) {
	_, err = conn.Exec("PRAGMA foreign_keys = ON", nil)
	if err != nil {
		return makeErr(err)
	}
	_, err = conn.Exec("PRAGMA journal_mode = "+SQLite3JournalMode, nil)
	if err != nil {
		return makeErr(err)
	}
	return nil
}

func opensqlite3(source string) (*sql.DB, error) {
	return sql.Open(sqlite3DriverName, source)
}

func openpgx(source string) (*sql.DB, error) {
	return sql.Open("pgx", source)
}

func openpgxcockroach(source string) (*sql.DB, error) {
	// try first with "cockroach" as a driver in case someone has registered
	// some special stuff. if that fails, then try again with "pgx" as
	// the driver.
	db, err := sql.Open("cockroach", source)
	if err != nil {
		db, err = sql.Open("pgx", source)
	}
	return db, err
}

func openspanner(source string) (*sql.DB, error) {
	return sql.Open("spanner", strings.TrimPrefix(source, "spanner://"))
}
